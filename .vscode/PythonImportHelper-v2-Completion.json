[
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.db.models",
        "description": "app.db.models",
        "isExtraImport": true,
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy.schema",
        "description": "sqlalchemy.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.schema",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "ShowUser",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Login",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "ShowUser",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Hash",
        "importPath": "app.hashing",
        "description": "app.hashing",
        "isExtraImport": true,
        "detail": "app.hashing",
        "documentation": {}
    },
    {
        "label": "Hash",
        "importPath": "app.hashing",
        "description": "app.hashing",
        "isExtraImport": true,
        "detail": "app.hashing",
        "documentation": {}
    },
    {
        "label": "Hash",
        "importPath": "app.hashing",
        "description": "app.hashing",
        "isExtraImport": true,
        "detail": "app.hashing",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "app.token",
        "description": "app.token",
        "isExtraImport": true,
        "detail": "app.token",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "importPath": "app.token",
        "description": "app.token",
        "isExtraImport": true,
        "detail": "app.token",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.repository",
        "description": "app.repository",
        "isExtraImport": true,
        "detail": "app.repository",
        "documentation": {}
    },
    {
        "label": "User_Repository",
        "importPath": "app.repository",
        "description": "app.repository",
        "isExtraImport": true,
        "detail": "app.repository",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.oauth",
        "description": "app.oauth",
        "isExtraImport": true,
        "detail": "app.oauth",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option('sqlalchemy.url', settings.DATABASE_URL)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\nfrom app.db.models import Base\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# target_metadata = None\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "def get_db():\n        db  = SessionLocal()\n        try:\n            yield db\n        finally :\n            db.close()",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABSE_URL",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "SQLALCHEMY_DATABSE_URL = \"postgresql://alestra:alestra@localhost:5432/usuarios\"\nengine = create_engine(SQLALCHEMY_DATABSE_URL)\nSessionLocal = sessionmaker(bind = engine, autocommit = False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n        db  = SessionLocal()\n        try:\n            yield db\n        finally :\n            db.close()",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABSE_URL)\nSessionLocal = sessionmaker(bind = engine, autocommit = False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n        db  = SessionLocal()\n        try:\n            yield db\n        finally :\n            db.close()",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "SessionLocal = sessionmaker(bind = engine, autocommit = False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n        db  = SessionLocal()\n        try:\n            yield db\n        finally :\n            db.close()",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.db.database",
        "description": "app.db.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n        db  = SessionLocal()\n        try:\n            yield db\n        finally :\n            db.close()",
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"user\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nombre = Column(String)\n    username = Column(String, unique=True)\n    password = Column(String)\n    nombre = Column(String)\n    apellido = Column(String)\n    direccion = Column(String)\n    telefono = Column(Integer)",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "Venta",
        "kind": 6,
        "importPath": "app.db.models",
        "description": "app.db.models",
        "peekOfCode": "class Venta(Base):\n    __tablename__ = \"venta\"\n    id=Column(Integer, primary_key=True, autoincrement=True)\n    usuario_id = Column(Integer, ForeignKey(\"user.id\",ondelete=\"CASCADE\"))\n    venta = Column(Integer)\n    ventas_productos = Column(Integer)",
        "detail": "app.db.models",
        "documentation": {}
    },
    {
        "label": "crear_usuario",
        "kind": 2,
        "importPath": "app.repository.User_Repository",
        "description": "app.repository.User_Repository",
        "peekOfCode": "def crear_usuario(usuario:User,db:Session):\n    try:\n        usuario = usuario.dict()\n        nuevo_usuario = models.User(\n            username=usuario[\"username\"],\n            password= Hash.hash_password( usuario[\"password\"] ),\n            nombre=usuario[\"nombre\"],\n            apellido=usuario[\"apellido\"],\n            telefono=usuario[\"telefono\"],\n            correo=usuario[\"correo\"],",
        "detail": "app.repository.User_Repository",
        "documentation": {}
    },
    {
        "label": "listar_usuarios",
        "kind": 2,
        "importPath": "app.repository.User_Repository",
        "description": "app.repository.User_Repository",
        "peekOfCode": "def listar_usuarios(db:Session):\n    return db.query(models.User).all()\ndef obtener_usuario(user_id:str, db:Session):\n    usuario = db.query(models.User).filter(models.User.id==user_id).first()\n    if not usuario:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"No se encontro usuario con ID {user_id}\"\n        )\n    return usuario",
        "detail": "app.repository.User_Repository",
        "documentation": {}
    },
    {
        "label": "obtener_usuario",
        "kind": 2,
        "importPath": "app.repository.User_Repository",
        "description": "app.repository.User_Repository",
        "peekOfCode": "def obtener_usuario(user_id:str, db:Session):\n    usuario = db.query(models.User).filter(models.User.id==user_id).first()\n    if not usuario:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"No se encontro usuario con ID {user_id}\"\n        )\n    return usuario\ndef actualizar_usuario(user_id:int, updateUser: UserUpdate,db:Session):\n    usuario = db.query(models.User).filter(models.User.id==user_id)",
        "detail": "app.repository.User_Repository",
        "documentation": {}
    },
    {
        "label": "actualizar_usuario",
        "kind": 2,
        "importPath": "app.repository.User_Repository",
        "description": "app.repository.User_Repository",
        "peekOfCode": "def actualizar_usuario(user_id:int, updateUser: UserUpdate,db:Session):\n    usuario = db.query(models.User).filter(models.User.id==user_id)\n    if not usuario.first():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"No se encontro usuario con ID {user_id}\"\n        )\n    usuario.update(updateUser.dict(exclude_unset=True) )\n    db.commit()\n    return {\"respuesta\":\"usuario actualizado\"}  ",
        "detail": "app.repository.User_Repository",
        "documentation": {}
    },
    {
        "label": "borrar_usuario",
        "kind": 2,
        "importPath": "app.repository.User_Repository",
        "description": "app.repository.User_Repository",
        "peekOfCode": "def borrar_usuario(id_usuario:str, db:Session ):\n    usuario = db.query(models.User).filter(models.User.id==id_usuario)\n    if not usuario.first():\n       raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"No se encontro usuario con ID {id_usuario}\"\n        )\n    usuario.delete( synchronize_session = False)\n    db.commit()\n    return {\"respuesta\":\"usuario eliminado\"}",
        "detail": "app.repository.User_Repository",
        "documentation": {}
    },
    {
        "label": "auth_user",
        "kind": 2,
        "importPath": "app.repository.auth",
        "description": "app.repository.auth",
        "peekOfCode": "def auth_user(usuario,db:Session):\n    user = db.query(models.User).filter(models.User.username==usuario.username).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"\"\"No existe el usuario con el username {usuario.username} por lo tanto no se realiza el login\"\"\"\n        )\n    if not Hash.verify_password(usuario.password, user.password):\n        raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,",
        "detail": "app.repository.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def login(usuario:OAuth2PasswordRequestForm = Depends(),db:Session = Depends(get_db)):\n    auth_token = auth.auth_user(usuario, db)\n    return auth_token",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/login\",\n    tags=[\"Login\"]\n)\n@router.post('/',status_code=status.HTTP_200_OK)\ndef login(usuario:OAuth2PasswordRequestForm = Depends(),db:Session = Depends(get_db)):\n    auth_token = auth.auth_user(usuario, db)\n    return auth_token",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "crear_usuario",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def crear_usuario(user:User,db:Session = Depends(get_db),current_user: User = Depends(get_current_user)):\n    User_Repository.crear_usuario(user,db)\n    return {\"respuesta\":\"Usuario creado con exito\"}\n@router.get('/',response_model=List[ShowUser],status_code=status.HTTP_200_OK)\ndef obtener_usuarios(db:Session = Depends(get_db),current_user: User = Depends(get_current_user)):\n    data = User_Repository.listar_usuarios(db)\n    return data\n@router.get(\"/{user_id}\", response_model=ShowUser )\ndef obtener_usuario(user_id:str, db:Session = Depends(get_db)):\n    usuario = User_Repository.obtener_usuario(user_id, db)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "obtener_usuarios",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def obtener_usuarios(db:Session = Depends(get_db),current_user: User = Depends(get_current_user)):\n    data = User_Repository.listar_usuarios(db)\n    return data\n@router.get(\"/{user_id}\", response_model=ShowUser )\ndef obtener_usuario(user_id:str, db:Session = Depends(get_db)):\n    usuario = User_Repository.obtener_usuario(user_id, db)\n    if not usuario:\n        return {\"respuesta\":\"usuario no encontrado\"}\n    return usuario\n@router.patch(\"/{user_id}\",status_code=status.HTTP_202_ACCEPTED)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "obtener_usuario",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def obtener_usuario(user_id:str, db:Session = Depends(get_db)):\n    usuario = User_Repository.obtener_usuario(user_id, db)\n    if not usuario:\n        return {\"respuesta\":\"usuario no encontrado\"}\n    return usuario\n@router.patch(\"/{user_id}\",status_code=status.HTTP_202_ACCEPTED)\ndef actualizar_usuario(user_id:int, updateUser: UserUpdate,db:Session = Depends(get_db) ):\n    response = User_Repository.actualizar_usuario(user_id, updateUser,db)\n    return response\n@router.delete('/borrar/{id_usuario}',status_code=status.HTTP_200_OK)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "actualizar_usuario",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def actualizar_usuario(user_id:int, updateUser: UserUpdate,db:Session = Depends(get_db) ):\n    response = User_Repository.actualizar_usuario(user_id, updateUser,db)\n    return response\n@router.delete('/borrar/{id_usuario}',status_code=status.HTTP_200_OK)\ndef borrar_usuario(id_usuario:str, db:Session = Depends(get_db)):\n   response = User_Repository.borrar_usuario(id_usuario, db)\n   return response",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "borrar_usuario",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def borrar_usuario(id_usuario:str, db:Session = Depends(get_db)):\n   response = User_Repository.borrar_usuario(id_usuario, db)\n   return response",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/user\", \n    tags = [\"Users\"]\n)\n@router.post('/crear_usuario',status_code=status.HTTP_201_CREATED)\ndef crear_usuario(user:User,db:Session = Depends(get_db),current_user: User = Depends(get_current_user)):\n    User_Repository.crear_usuario(user,db)\n    return {\"respuesta\":\"Usuario creado con exito\"}\n@router.get('/',response_model=List[ShowUser],status_code=status.HTTP_200_OK)\ndef obtener_usuarios(db:Session = Depends(get_db),current_user: User = Depends(get_current_user)):",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "Hash",
        "kind": 6,
        "importPath": "app.hashing",
        "description": "app.hashing",
        "peekOfCode": "class Hash():\n    def hash_password(str_pwd):\n        return pwd_context.hash(str_pwd)\n    def verify_password(plain_password, hashed_password):\n        return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.hashing",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.hashing",
        "description": "app.hashing",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass Hash():\n    def hash_password(str_pwd):\n        return pwd_context.hash(str_pwd)\n    def verify_password(plain_password, hashed_password):\n        return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.hashing",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.oauth",
        "description": "app.oauth",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    return verify_token(token,credentials_exception)",
        "detail": "app.oauth",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.oauth",
        "description": "app.oauth",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\ndef get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    return verify_token(token,credentials_exception)",
        "detail": "app.oauth",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class User(BaseModel):\n    username:str\n    password:str\n    nombre:str\n    apellido:str\n    direccion: Optional[str]\n    telefono:int\n    correo:str\n    creacion:datetime = datetime.now()\nclass ShowUser(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "ShowUser",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class ShowUser(BaseModel):\n    username:str\n    nombre:str\n    correo:str\n    class Config():\n        orm_mode = True\n#User Model\nclass UserUpdate(BaseModel):\n    username:str = None\n    password:str= None",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserUpdate(BaseModel):\n    username:str = None\n    password:str= None\n    nombre:str= None\n    apellido:str= None\n    direccion: str= None\n    telefono:int= None\n    correo:str= None \nclass Login(BaseModel):\n    username:str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Login",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Login(BaseModel):\n    username:str\n    password:str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    username: Union[str, None] = None",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    username: Union[str, None] = None",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    username: Union[str, None] = None",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.token",
        "description": "app.token",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta( minutes=ACCESS_TOKEN_EXPIRE_MINUTES )\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token( token:str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")",
        "detail": "app.token",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "kind": 2,
        "importPath": "app.token",
        "description": "app.token",
        "peekOfCode": "def verify_token( token:str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception",
        "detail": "app.token",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.token",
        "description": "app.token",
        "peekOfCode": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta( minutes=ACCESS_TOKEN_EXPIRE_MINUTES )\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token( token:str, credentials_exception):",
        "detail": "app.token",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.token",
        "description": "app.token",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta( minutes=ACCESS_TOKEN_EXPIRE_MINUTES )\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token( token:str, credentials_exception):\n    try:",
        "detail": "app.token",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.token",
        "description": "app.token",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta( minutes=ACCESS_TOKEN_EXPIRE_MINUTES )\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token( token:str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "app.token",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "core.config",
        "description": "core.config",
        "peekOfCode": "class Settings:\n    PROJECT_NAME:str = \"Proyecto FAST API\"\n    PROJECT_VERSION:str = \"1.0\"\n    POSTGRES_DB:str=os.getenv('POSTGRES_DB')\n    POSTGRES_USER:str=os.getenv('POSTGRES_USER')\n    POSTGRES_PASSWORD:str=os.getenv('POSTGRES_PASSWORD')\n    POSTGRES_SERVER:str=os.getenv('POSTGRES_SERVER')\n    POSTGRES_PORT:int=os.getenv('POSTGRES_PORT')\n    DATABASE_URL = f\"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_SERVER}:{POSTGRES_PORT}/{POSTGRES_DB}\"\nsettings = Settings()",
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "env_path",
        "kind": 5,
        "importPath": "core.config",
        "description": "core.config",
        "peekOfCode": "env_path = Path(\".\")/'.env'\nload_dotenv(dotenv_path = env_path)\nclass Settings:\n    PROJECT_NAME:str = \"Proyecto FAST API\"\n    PROJECT_VERSION:str = \"1.0\"\n    POSTGRES_DB:str=os.getenv('POSTGRES_DB')\n    POSTGRES_USER:str=os.getenv('POSTGRES_USER')\n    POSTGRES_PASSWORD:str=os.getenv('POSTGRES_PASSWORD')\n    POSTGRES_SERVER:str=os.getenv('POSTGRES_SERVER')\n    POSTGRES_PORT:int=os.getenv('POSTGRES_PORT')",
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "load_dotenv(dotenv_path",
        "kind": 5,
        "importPath": "core.config",
        "description": "core.config",
        "peekOfCode": "load_dotenv(dotenv_path = env_path)\nclass Settings:\n    PROJECT_NAME:str = \"Proyecto FAST API\"\n    PROJECT_VERSION:str = \"1.0\"\n    POSTGRES_DB:str=os.getenv('POSTGRES_DB')\n    POSTGRES_USER:str=os.getenv('POSTGRES_USER')\n    POSTGRES_PASSWORD:str=os.getenv('POSTGRES_PASSWORD')\n    POSTGRES_SERVER:str=os.getenv('POSTGRES_SERVER')\n    POSTGRES_PORT:int=os.getenv('POSTGRES_PORT')\n    DATABASE_URL = f\"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_SERVER}:{POSTGRES_PORT}/{POSTGRES_DB}\"",
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "core.config",
        "description": "core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "description": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "peekOfCode": "def upgrade() -> None:\n    pass\ndef downgrade() -> None:\n    pass",
        "detail": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "description": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "peekOfCode": "def downgrade() -> None:\n    pass",
        "detail": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "description": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "peekOfCode": "revision = '7cb2c872bd3a'\ndown_revision = 'e123217d280e'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    pass\ndef downgrade() -> None:\n    pass",
        "detail": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "description": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "peekOfCode": "down_revision = 'e123217d280e'\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    pass\ndef downgrade() -> None:\n    pass",
        "detail": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "description": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    pass\ndef downgrade() -> None:\n    pass",
        "detail": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "description": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    pass\ndef downgrade() -> None:\n    pass",
        "detail": "migratgion.versions.7cb2c872bd3a_creacion_de_base_de_datos",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migratgion.versions.e123217d280e_",
        "description": "migratgion.versions.e123217d280e_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migratgion.versions.e123217d280e_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migratgion.versions.e123217d280e_",
        "description": "migratgion.versions.e123217d280e_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migratgion.versions.e123217d280e_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migratgion.versions.e123217d280e_",
        "description": "migratgion.versions.e123217d280e_",
        "peekOfCode": "revision = 'e123217d280e'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "migratgion.versions.e123217d280e_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migratgion.versions.e123217d280e_",
        "description": "migratgion.versions.e123217d280e_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass",
        "detail": "migratgion.versions.e123217d280e_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migratgion.versions.e123217d280e_",
        "description": "migratgion.versions.e123217d280e_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migratgion.versions.e123217d280e_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migratgion.versions.e123217d280e_",
        "description": "migratgion.versions.e123217d280e_",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migratgion.versions.e123217d280e_",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migratgion.env",
        "description": "migratgion.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migratgion.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migratgion.env",
        "description": "migratgion.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "migratgion.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migratgion.env",
        "description": "migratgion.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option('sqlalchemy.url', settings.DATABASE_URL)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\nfrom app.db.models import Base\ntarget_metadata = Base.metadata",
        "detail": "migratgion.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migratgion.env",
        "description": "migratgion.env",
        "peekOfCode": "target_metadata = Base.metadata\n# target_metadata = None\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable",
        "detail": "migratgion.env",
        "documentation": {}
    },
    {
        "label": "crea_primer_usuario",
        "kind": 2,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "def crea_primer_usuario():\n    password_hash = Hash.hash_password('perote')\n    Session = sessionmaker(bind=engine)\n    session = Session()\n    usuario = User(\n        nombre=\"cherlo\", \n        username=\"cherlo56\",\n        password=password_hash, \n        apellido=\"garcia\",\n        direccion=\"conocida\", ",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "override_get_db",
        "kind": 2,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "def override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\napp.dependency_overrides[get_db] = override_get_db\ncliente = TestClient(app)\ndef test_crear_usuario():\n    usuario = {",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "test_crear_usuario",
        "kind": 2,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "def test_crear_usuario():\n    usuario = {\n        \"username\": \"cherlux\",\n        \"password\": \"12345678\",\n        \"nombre\": \"Vicente\",\n        \"apellido\": \"Garcia\",\n        \"direccion\": \"Conocida\",\n        \"telefono\": 3335588,\n        \"correo\": \"cherlux@gmail.com\",\n        \"creacion\": \"2023-02-07T06:38:00.785759\"",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "test_obtener_usuarios",
        "kind": 2,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "def test_obtener_usuarios():\n    usuarioTest = {\n        \"username\": \"cherlo56\",\n        \"password\": \"perote\"\n    }\n    response_token = cliente.post(\"/login/\",data=usuarioTest)\n    assert response_token.status_code == 200\n    assert response_token.json()[\"token_type\"] == \"bearer\"\n    headers = {\n        \"Authorization\": \"Bearer {}\".format(response_token.json()[\"access_token\"])",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "test_obtener_usuario",
        "kind": 2,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "def test_obtener_usuario():\n    response = cliente.get(\"/user/1\")\n    print(response.json())\n    assert response.status_code == 200\n    assert response.json()[\"username\"] == \"cherlo56\"\ndef test_eliminar_usuario():\n    response = cliente.delete(\"/borrar/2\")\n    print(response.json())\n    assert response.status_code == 404\ndef test_actualizar_usuario():",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "test_eliminar_usuario",
        "kind": 2,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "def test_eliminar_usuario():\n    response = cliente.delete(\"/borrar/2\")\n    print(response.json())\n    assert response.status_code == 404\ndef test_actualizar_usuario():\n    usuario = {\n        \"username\" : \"cherlo82\",\n    }\n    response = cliente.patch(\"/user/1\", json=usuario)\n    print(\"====================================================== Resultado de la actualizacion ======================================================\")",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "test_actualizar_usuario",
        "kind": 2,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "def test_actualizar_usuario():\n    usuario = {\n        \"username\" : \"cherlo82\",\n    }\n    response = cliente.patch(\"/user/1\", json=usuario)\n    print(\"====================================================== Resultado de la actualizacion ======================================================\")\n    print(response)\n    assert response.status_code == 202\ndef test_delete_database():\n    db_path = os.path.join(os.path.dirname(__file__),'test.db')",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "test_delete_database",
        "kind": 2,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "def test_delete_database():\n    db_path = os.path.join(os.path.dirname(__file__),'test.db')\n    os.remove(db_path)",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "db_path",
        "kind": 5,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "db_path = os.path.join(os.path.dirname(__file__),'test.db')\ndb_uri = \"sqlite:///{}\".format(db_path)\nengine = create_engine(db_uri)\nBase.metadata.create_all(bind=engine)\nTestingSessionLocal = sessionmaker(bind=engine,autocommit=False,autoflush=False)\ndef crea_primer_usuario():\n    password_hash = Hash.hash_password('perote')\n    Session = sessionmaker(bind=engine)\n    session = Session()\n    usuario = User(",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "db_uri",
        "kind": 5,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "db_uri = \"sqlite:///{}\".format(db_path)\nengine = create_engine(db_uri)\nBase.metadata.create_all(bind=engine)\nTestingSessionLocal = sessionmaker(bind=engine,autocommit=False,autoflush=False)\ndef crea_primer_usuario():\n    password_hash = Hash.hash_password('perote')\n    Session = sessionmaker(bind=engine)\n    session = Session()\n    usuario = User(\n        nombre=\"cherlo\", ",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "engine = create_engine(db_uri)\nBase.metadata.create_all(bind=engine)\nTestingSessionLocal = sessionmaker(bind=engine,autocommit=False,autoflush=False)\ndef crea_primer_usuario():\n    password_hash = Hash.hash_password('perote')\n    Session = sessionmaker(bind=engine)\n    session = Session()\n    usuario = User(\n        nombre=\"cherlo\", \n        username=\"cherlo56\",",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "TestingSessionLocal",
        "kind": 5,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "TestingSessionLocal = sessionmaker(bind=engine,autocommit=False,autoflush=False)\ndef crea_primer_usuario():\n    password_hash = Hash.hash_password('perote')\n    Session = sessionmaker(bind=engine)\n    session = Session()\n    usuario = User(\n        nombre=\"cherlo\", \n        username=\"cherlo56\",\n        password=password_hash, \n        apellido=\"garcia\",",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_db]",
        "kind": 5,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "app.dependency_overrides[get_db] = override_get_db\ncliente = TestClient(app)\ndef test_crear_usuario():\n    usuario = {\n        \"username\": \"cherlux\",\n        \"password\": \"12345678\",\n        \"nombre\": \"Vicente\",\n        \"apellido\": \"Garcia\",\n        \"direccion\": \"Conocida\",\n        \"telefono\": 3335588,",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "cliente",
        "kind": 5,
        "importPath": "test.test_api",
        "description": "test.test_api",
        "peekOfCode": "cliente = TestClient(app)\ndef test_crear_usuario():\n    usuario = {\n        \"username\": \"cherlux\",\n        \"password\": \"12345678\",\n        \"nombre\": \"Vicente\",\n        \"apellido\": \"Garcia\",\n        \"direccion\": \"Conocida\",\n        \"telefono\": 3335588,\n        \"correo\": \"cherlux@gmail.com\",",
        "detail": "test.test_api",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(user.router)\napp.include_router(auth.router)\n#def create_tables():\n#    Base.metadata.create_all(bind = engine)\n#create_tables()\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", port=8000, reload=True)",
        "detail": "main",
        "documentation": {}
    }
]